//
//  CPBottomPromitView.m
//  BottomPromitView
//
//  Created by lk06 on 17/2/15.
//  Copyright © 2017年 lk06. All rights reserved.
//

#import "CPBottomPromitView.h"
#import "CPBottomPromitManager.h"
#import "CPBottomPromitCell.h"
#import "CPBottomPromitHeadView.h"

#define SCREENSIZE [UIScreen mainScreen].bounds.size
#define DURATION .25
#define spacing 7
#define CELL_CANCLE_HEIGHT 50

@interface CPBottomPromitView ()<UITableViewDelegate,UITableViewDataSource>
{
    CPBottomPromitManager   *cancleManager;
}
@property (nonatomic , strong) UIView                       *backView;
@property (nonatomic , strong) UITapGestureRecognizer       *tapGestureRecognizerBackView;
@property (nonatomic , strong) BHLinkTableView                  *tableView;
@property (nonatomic , strong) NSMutableArray<CPBottomPromitManager *> *managers;

@end

@implementation CPBottomPromitView

+(__kindof CPBottomPromitView *)bottomPromitView{
    CPBottomPromitView *bottomPromitView = [[CPBottomPromitView alloc] initWithFrame:CGRectMake(0, 0, SCREENSIZE.width, SCREENSIZE.height)];
    return bottomPromitView;
}

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) { 
        self.backgroundColor = [UIColor clearColor];
        cancleManager = [[CPBottomPromitManager alloc] initWithTitle:@"取消" detail:nil titleColor:[UIColor blackColor] detailColor:[UIColor darkGrayColor]];
        if ([self.tableView respondsToSelector:@selector(setSeparatorInset:)]) {
            [self.tableView setSeparatorInset:UIEdgeInsetsZero];
        }
        if ([self.tableView respondsToSelector:@selector(setLayoutMargins:)]) {
            [self.tableView setLayoutMargins:UIEdgeInsetsZero];
        }
        [self addSubview:self.backView];
        [self addSubview:self.tableView];
        
    }
    return self;
}

#pragma mark - set
-(void)cpSetTitles:(NSArray<NSString *> *)titles details:(NSArray *)details titleColors:(NSArray<UIColor *> *)colors detailsColors:(NSArray<UIColor *> *)detailsColors{
    for (int i = 0 ; i < titles.count ; i ++) {
        CPBottomPromitManager *manager = [[CPBottomPromitManager alloc] initWithTitle:titles[i] detail:details[i] titleColor:colors[i] detailColor:detailsColors[i]];
        [self.managers addObject:manager];
    }
    [self cpChangeTableViewFrameAddHeight:0];
}

-(void)cpChangeTableViewFrameAddHeight:(CGFloat)addHeight{
    CGRect rect_tableView = self.tableView.frame;
    CGFloat height = cancleManager.height + spacing + addHeight;
    for (CPBottomPromitManager *manager in self.managers) {
        height += manager.height;
    }
    rect_tableView.size.height = height;
    self.tableView.frame = rect_tableView;
}

-(void)cpSetShowHeadViewHeadTitle:(NSString *)title titleColor:(UIColor *)titleColor{
    CPBottomPromitHeadView *headView = [CPBottomPromitHeadView HeadView];
    __weak typeof(self) weakself = self;
    [headView cpSetHeadViewTitle:title color:titleColor complete:^{
        weakself.tableView.tableHeaderView = headView;
        [weakself cpChangeTableViewFrameAddHeight:CGRectGetHeight(headView.frame)];
    }];
}


#pragma mark - UITableViewDataSource
-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{
    return 2;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    return section == 0 ? self.managers.count : 1;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    CPBottomPromitCell *cell = [tableView dequeueReusableCellWithIdentifier:[CPBottomPromitCell identifier]];
    if (indexPath.section == 0) {
        [cell cpSetManager:self.managers[indexPath.row]];
    }else{
        [cell cpSetManager:cancleManager];
    }
    return cell;
}

#pragma mark - UITableViewDelegate
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    if (indexPath.section == 1) {
        return cancleManager.height;
    }else{
        return self.managers[indexPath.row].height;
    }
}
- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section{
    return .01;
}
- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section{
    return section == 0 ? spacing : .01;
}

-(UIView *)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section{
    if (section == 0) {
        UIView *spcingView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, SCREENSIZE.width, spacing)];
        spcingView.backgroundColor = [[UIColor cz_ToUIColorByStr:@"2f2f2f"] colorWithAlphaComponent:.1];
        return spcingView;
    }else{
        return nil;
    }
}

-(void)tableView:(UITableView *)tableView didHighlightRowAtIndexPath:(NSIndexPath *)indexPath{
    CPBottomPromitCell *cell = [tableView cellForRowAtIndexPath:indexPath];
    cell.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:.05];
}
-(void)tableView:(UITableView *)tableView didUnhighlightRowAtIndexPath:(NSIndexPath *)indexPath{
    CPBottomPromitCell *cell = [tableView cellForRowAtIndexPath:indexPath];
    cell.backgroundColor = [UIColor clearColor];
}

-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    if (indexPath.section == 0){
        if (self.cpDelegate && [self.cpDelegate respondsToSelector:@selector(cpBottomPromitView:didSelectRowAtIndexPath:)]) {
            [self.cpDelegate cpBottomPromitView:self didSelectRowAtIndexPath:indexPath];
        }
    }else if (indexPath.section == 1){
        if (self.cpDelegate && [self.cpDelegate respondsToSelector:@selector(cpCancleChooseBottomPromitView:)]) {
            [self.cpDelegate cpCancleChooseBottomPromitView:self];
        }
    }
    [self cpViewWillDis];
}

-(void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath
{
    if ([cell respondsToSelector:@selector(setSeparatorInset:)]) {
        [cell setSeparatorInset:UIEdgeInsetsZero];
    }
    
    if ([cell respondsToSelector:@selector(setLayoutMargins:)]) {
        [cell setLayoutMargins:UIEdgeInsetsZero];
    }
}

#pragma mark - CPBottomPromitCellDelegate
-(void)cpBottomPromitCellReloadIndexPath:(NSIndexPath *)indexPath{
    [self.tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationNone];
}

-(void)show{
    [getWindow  addSubview:self];
    CGRect rect_tableView = self.tableView.frame;
    rect_tableView.origin.y = SCREENSIZE.height - rect_tableView.size.height;
    __weak typeof(self) weakself = self;
    CGRect rect_backView = self.backView.frame;
    rect_backView.size.height = SCREENSIZE.height - rect_tableView.size.height;
    [UIView animateWithDuration:DURATION animations:^{
        weakself.backView.alpha = 0.3;
        weakself.backView.frame = rect_backView;
        weakself.tableView.frame = rect_tableView;
    }];
}

-(void)tapBackViewAction:(UITapGestureRecognizer *)tap{
    [self cpViewWillDis];
    if (self.cpDelegate && [self.cpDelegate respondsToSelector:@selector(cpCancleChooseBottomPromitView:)]) {
        [self.cpDelegate cpCancleChooseBottomPromitView:self];
    }
}

-(void)cpViewWillDis{
    __weak typeof(self) weakself = self;
    CGRect rect_tableView = self.tableView.frame;
    rect_tableView.origin.y = SCREENSIZE.height;
    CGRect rect_backView = self.backView.frame;
    rect_backView.size.height = SCREENSIZE.height;
    [UIView animateWithDuration:DURATION animations:^{
        weakself.backView.frame = rect_backView;
        weakself.backView.alpha = 0;
        weakself.tableView.frame = rect_tableView;
    } completion:^(BOOL finished) {
        [weakself removeFromSuperview];
    }];
}


-(void)dealloc{
    [self.backView removeFromSuperview];
    self.backView = nil;
    self.tapGestureRecognizerBackView = nil;
}

#pragma mark - get
-(UIView *)backView{
    if (_backView == nil) {
        _backView = [[UIView alloc] initWithFrame:self.bounds];
        _backView.alpha = 0;
        _backView.backgroundColor = [UIColor blackColor];
        [_backView addGestureRecognizer:self.tapGestureRecognizerBackView];
    }
    return _backView;
}

-(UITapGestureRecognizer *)tapGestureRecognizerBackView{
    if (_tapGestureRecognizerBackView == nil) {
        _tapGestureRecognizerBackView = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapBackViewAction:)];
    }
    return _tapGestureRecognizerBackView;
}

-(UITableView *)tableView{
    if (_tableView == nil) {
        _tableView = [[BHLinkTableView alloc] initWithFrame:CGRectMake(0, SCREENSIZE.height, SCREENSIZE.width, 0) style:UITableViewStyleGrouped];
        [_tableView registerClass:[CPBottomPromitCell class] forCellReuseIdentifier:[CPBottomPromitCell identifier]];
        [_tableView setSeparatorColor:[[UIColor darkGrayColor] colorWithAlphaComponent:.1]];
        _tableView.delegate = self;
        _tableView.dataSource = self;
        _tableView.scrollEnabled = NO;
        _tableView.layer.anchorPoint = CGPointMake(.5, 1);
        _tableView.backgroundColor = [UIColor clearColor];
        UIBlurEffect *blur = [UIBlurEffect effectWithStyle:UIBlurEffectStyleExtraLight];
        UIVisualEffectView * effe = [[UIVisualEffectView alloc]initWithEffect:blur];
        effe.frame = CGRectMake(0, 0, SCREENSIZE.width, SCREENSIZE.height);
        _tableView.backgroundView = effe;
    }
    return _tableView;
}


-(NSMutableArray<CPBottomPromitManager *> *)managers{
    if (_managers == nil) {
        _managers = [NSMutableArray array];
    }
    return _managers;
}

/*
// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
- (void)drawRect:(CGRect)rect {
    // Drawing code
}
*/

@end
